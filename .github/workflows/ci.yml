name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: windows-latest
            rust: beta
          - os: ubuntu-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libxkbcommon-dev \
          libwayland-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libxinerama-dev \
          libgl1-mesa-dev \
          libudev-dev \
          libspeechd-dev \
          speech-dispatcher \
          libfontconfig1-dev \
          libfreetype6-dev \
          libxft-dev \
          pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

  build:
    name: Build Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: kmobile-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: kmobile-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name: kmobile-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: kmobile-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libxkbcommon-dev \
          libwayland-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libxinerama-dev \
          libgl1-mesa-dev \
          libudev-dev \
          libspeechd-dev \
          speech-dispatcher \
          libfontconfig1-dev \
          libfreetype6-dev \
          libxft-dev \
          pkg-config

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Rename binary
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          mv target/${{ matrix.target }}/release/kmobile.exe ${{ matrix.name }}
        else
          mv target/${{ matrix.target }}/release/kmobile ${{ matrix.name }}
        fi

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libxkbcommon-dev \
          libwayland-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxi-dev \
          libxinerama-dev \
          libgl1-mesa-dev \
          libudev-dev \
          libspeechd-dev \
          speech-dispatcher \
          libfontconfig1-dev \
          libfreetype6-dev \
          libxft-dev \
          pkg-config
    
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: llvm-tools-preview
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    - name: Generate coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: macos-latest  # macOS for iOS simulator access
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 34
        
    - name: Setup iOS Simulator
      run: |
        xcrun simctl list devices
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-integration-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build KMobile
      run: cargo build --release

    - name: Run integration tests
      run: |
        ./target/release/kmobile device list || true
        ./target/release/kmobile simulator list || true
        echo "Integration tests completed"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security-audit]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          kmobile-linux-x86_64/kmobile-linux-x86_64
          kmobile-windows-x86_64.exe/kmobile-windows-x86_64.exe
          kmobile-macos-x86_64/kmobile-macos-x86_64
          kmobile-macos-aarch64/kmobile-macos-aarch64
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}